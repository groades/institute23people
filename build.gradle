buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:2.2.0'
        classpath "io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE"
    }
}
plugins {
	id 'org.springframework.boot' version '2.2.6.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
}
repositories {   // repositories for Jar's you access in your code
  maven {
    url 'https://oss.sonatype.org/content/repositories/snapshots' // SNAPSHOT repository (if needed)
  }
  mavenCentral()
  jcenter()
}

apply plugin: 'java'                              // standard Java tasks
apply plugin: 'war'                               // standard Web Archive plugin
apply plugin: 'com.google.cloud.tools.appengine'  // App Engine tasks
apply plugin: "io.spring.dependency-management"

group = 'com.test'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
targetCompatibility = 1.8 

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

ext {
	set('springCloudVersion', "Hoxton.SR3")
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	implementation 'com.google.appengine:appengine-api-1.0-sdk:+'  // Latest App Engine Api's
  	implementation 'jstl:jstl:1.2'
  	
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-config-server'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'mysql:mysql-connector-java'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	implementation('org.apache.tomcat.embed:tomcat-embed-jasper:8.0.47')
	
	testCompile 'junit:junit:4.12'
  	testCompile 'com.google.truth:truth:0.33'
  	testCompile 'org.mockito:mockito-all:1.10.19'

  	testCompile 'com.google.appengine:appengine-testing:+'
  	testCompile 'com.google.appengine:appengine-api-stubs:+'
  	testCompile 'com.google.appengine:appengine-tools-sdk:+'
}


// Always run unit tests
//appengineDeploy.dependsOn test
//appengineStage.dependsOn test

appengine {  // App Engine tasks configuration
  deploy {   // deploy configuration
  	stopPreviousVersion = true  
    promote = true
    projectId = System.getenv('GOOGLE_CLOUD_PROJECT')
    version = '1'
  }
}

test {
  useJUnit()
  testLogging.showStandardStreams = true
  beforeTest { descriptor ->
     logger.lifecycle("test: " + descriptor + "  Running")
  }

  onOutput { descriptor, event ->
     logger.lifecycle("test: " + descriptor + ": " + event.message )
  }
  afterTest { descriptor, result ->
    logger.lifecycle("test: " + descriptor + ": " + result )
  }
}
